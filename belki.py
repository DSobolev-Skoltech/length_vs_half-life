# -*- coding: utf-8 -*-
"""belki.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPb17ZGbl10PNVRayYUnJmtPTC9HAudQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import requests # Либа для POST/GET запросов

pd.options.mode.chained_assignment = None  # default='warn'



df = pd.read_excel('newData.xlsx')
df = df.drop(['Unnamed: 0'], axis=1)
df

df['roundLength'] = 0
for i in range(len(df.Length)):
  df['roundLength'][i] = int(df.Length[i] - (df.Length[i] % 50))

import math
import seaborn as sns
import statistics
import matplotlib.pyplot as plt
from scipy.interpolate import BSpline
from scipy.interpolate import CubicSpline
from plotnine import ggplot, aes, geom_line, geom_smooth,geom_point
from plotnine import *
from plotnine.data import *
from scipy.interpolate import BSpline, make_interp_spline
from scipy.ndimage.filters import gaussian_filter1d

#scatter plot with different variations
def scatter_full(column_name, max_x=10000, max_y=10000):
  length = []
  half_life = []
  for i in range(len(df['roundLength'])):
    if not math.isnan(df[column_name][i]):
      if (df[column_name][i] <= max_y) and (df['Length'][i] <= max_x):
        length.append(df['Length'][i])
        half_life.append(df[column_name][i])
  figure(figsize=(15, 8), dpi=80)
  df3 = pd.DataFrame({'Length': length, column_name: half_life})
  plt.title('Scatter plot for all' )
  sns.regplot(x='Length', y=column_name, data=df3, scatter_kws={'alpha':0.3, "color": "black"}, line_kws={"color": "red"}, fit_reg=False, logx=True)
  df3.sort_values(by=['Length'], inplace=True)
  df3 = df3.drop_duplicates(subset = ["Length"])
  #xnew = np.linspace(df3['Length'].min(), df3['Length'].max(), 10)
  #spl = make_interp_spline(list(df3['Length']), df3[column_name], k=3)  # type: BSpline
  #power_smooth = spl(xnew)
  #plt.plot(xnew, power_smooth, label='Spline')
  ysmoothed = gaussian_filter1d(df3[column_name], sigma=25)
  plt.plot(df3['Length'], ysmoothed, label='Gaussian',color='red')
  plt.legend()
  plt.show()


#histograms with average in length (roundlength)
def get_plot(column_name):
  x = sorted(list(pd.unique(df.roundLength)))
  avg_y = {}
  for i in range(len(df['roundLength'])):
    if not (df['roundLength'][i] in avg_y) and not math.isnan(df[column_name][i]):
      avg_y[df['roundLength'][i]] = [df[column_name][i]]
    elif (df['roundLength'][i] in avg_y) and not math.isnan(df[column_name][i]):
      avg_y[df['roundLength'][i]].append(df[column_name][i])  
  avg_y = dict(sorted(avg_y.items()))
  x_y = {}
  std = []
  for i in avg_y.keys():
    x_y[i] = sum(avg_y[i])/len(avg_y[i])
    if len(avg_y[i]) >= 2:
      std.append(statistics.stdev(avg_y[i]))
    else:
      std.append(0)
  std2 = statistics.stdev(x_y.values())
  figure(figsize=(10, 6), dpi=80)
  plt.xlabel('Length')
  plt.ylabel(column_name)
  plt.title(column_name+' and length' )
  cs = CubicSpline(list(x_y.keys())[1:41],list(x_y.values())[1:41])
  x_range = np.arange(50, 2000, 50)
  plt.plot(x_range, cs(x_range), label='Cubic Spline')
  plt.bar(list(x_y.keys())[1:41],list(x_y.values())[1:41],ec='blue', label='half-life from length')
  plt.plot(list(x_y.keys())[1:41],[max(list(x_y.values()))*0.75]*40, color='gray', label='75%')
  plt.plot(list(x_y.keys())[1:41],[max(list(x_y.values()))*0.5]*40, color='red', label='50%')
  plt.plot(list(x_y.keys())[1:41],[max(list(x_y.values()))*0.25]*40, color='purple', label='25%')
  plt.plot(list(x_y.keys())[1:41], std[1:41], color='black', label='sd for each length', alpha=0.5)
  plt.plot(list(x_y.keys())[1:41],[std2]*40,color='green', label='sd for all length')
  plt.legend()
  plt.show()
  figure(figsize=(10, 6), dpi=80)
  df2 = pd.DataFrame({'Length': list(x_y.keys())[1:41], column_name: list(x_y.values())[1:41]})
  plt.title('Scatter plot for AVG' )
  sns.regplot(x='Length', y=column_name, data=df2, logx = True)
  plt.show()
  scatter_full('Mouse Neurons, replicate 4 half_life', 2000, 500)

get_plot('Mouse Neurons, replicate 4 half_life')


#correlation matrix
f = plt.figure(figsize=(19, 15))
plt.matshow(df.corr(), fignum=f.number)
plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=90)
plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)
cb = plt.colorbar()
cb.ax.tick_params(labelsize=14)

